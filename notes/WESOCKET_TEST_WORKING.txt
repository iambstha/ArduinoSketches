/*
 * WebSocketClient.ino
 *
 *  Created on: 24.05.2015
 *
 */

#include <Arduino.h>
#include <WiFi.h>
#include <WiFiMulti.h>
#include <WebSocketsClient.h>
#include <ArduinoJson.h>

WiFiMulti WiFiMulti;
WebSocketsClient webSocket;

#define USE_SERIAL Serial

void hexdump(const void* mem, uint32_t len, uint8_t cols = 16) {
  const uint8_t* src = (const uint8_t*)mem;
  USE_SERIAL.printf("\n[HEXDUMP] Address: 0x%08X len: 0x%X (%d)", (ptrdiff_t)src, len, len);
  for (uint32_t i = 0; i < len; i++) {
    if (i % cols == 0) {
      USE_SERIAL.printf("\n[0x%08X] 0x%08X: ", (ptrdiff_t)src, i);
    }
    USE_SERIAL.printf("%02X ", *src);
    src++;
  }
  USE_SERIAL.printf("\n");
}

void webSocketEvent(WStype_t type, uint8_t* payload, size_t length) {
  USE_SERIAL.printf("[WSc] Received WebSocket message of type %d\n", type);
  USE_SERIAL.printf("[WSc] WebSocket payload %d\n", payload);
  USE_SERIAL.printf("[WSc] WebSocket message length %d\n", length);
  switch (type) {
    case WStype_DISCONNECTED:
      USE_SERIAL.printf("[WSc] Disconnected!\n");
      break;
      
    case WStype_CONNECTED: {
      // Extract the connected URL from payload
      String connectedUrl = String((char*)payload).substring(0, length);
      USE_SERIAL.printf("[WSc] Connected to url: %s\n", connectedUrl.c_str());

      // send message to server when Connected
      webSocket.sendTXT("Connected");
      break;
    }

  case WStype_TEXT: {
      USE_SERIAL.printf("[WSc] get text: %s\n", payload);

      // Convert payload to String
      String payloadString = String((char*)payload);

      // Display the JSON data before parsing
      USE_SERIAL.println("Received JSON data:");
      USE_SERIAL.println(payloadString);

      // Parse the received JSON data
      StaticJsonDocument<200> jsonDocument;
      DeserializationError error = deserializeJson(jsonDocument, payloadString);

      // Check if parsing was successful
      if (error) {
          USE_SERIAL.printf("[WSc] Error parsing JSON: %s\n", error.c_str());
      } else {
          // Access JSON data
          const char* message = jsonDocument["message"];
          int value = jsonDocument["value"].as<int>();  // Corrected to read as int
          USE_SERIAL.printf("[WSc] Parsed JSON - Message: %s, Value: %d\n", message, value);
      }
      break;
  }


    case WStype_BIN:
      USE_SERIAL.printf("[WSc] get binary length: %u\n", length);
      hexdump(payload, length);
      break;

    case WStype_ERROR:
    case WStype_FRAGMENT_TEXT_START:
    case WStype_FRAGMENT_BIN_START:
    case WStype_FRAGMENT:
    case WStype_FRAGMENT_FIN:
      break;
  }
}



void setup() {
  USE_SERIAL.begin(115200);

  USE_SERIAL.println("[SETUP] Starting WebSocket connection setup...");

  USE_SERIAL.println();
  USE_SERIAL.println();
  USE_SERIAL.println();

  for (uint8_t t = 4; t > 0; t--) {
    USE_SERIAL.printf("[SETUP] BOOT WAIT %d...\n", t);
    USE_SERIAL.flush();
    delay(1000);
  }

  WiFiMulti.addAP("Smart Solutions", "913niraj913913");

  while (WiFiMulti.run() != WL_CONNECTED) {
    delay(100);
  }

  // server address, port and URL
  webSocket.begin("192.168.1.47", 8080, "/bishal");

  // event handler
  webSocket.onEvent(webSocketEvent);

  // try every 5000 ms if connection has failed
  webSocket.setReconnectInterval(5000);
}

void loop() {

  webSocket.loop();

  // Send "HI" to the server every 1 second
  static unsigned long lastMillis = 0;
  if (millis() - lastMillis > 1000) {
    if (webSocket.isConnected()) {
            // Create a JSON document
      StaticJsonDocument<200> jsonDocument;
      jsonDocument["message"] = "HI";
      jsonDocument["value"] = 9;

      // Serialize the JSON document to a String
      String jsonString;
      serializeJson(jsonDocument, jsonString);

      // Print the JSON data before sending
      USE_SERIAL.println("Sending JSON data:");
      USE_SERIAL.println(jsonString);

      // Send the JSON data to the server
      webSocket.sendTXT(jsonString);
    }
    lastMillis = millis();
  }

  delay(10);  // Ensure some delay between iterations
}
