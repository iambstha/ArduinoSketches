#ifndef ELOQUENT_ESP32CAM_VIZ_FACE_DETECTION_H
#define ELOQUENT_ESP32CAM_VIZ_FACE_DETECTION_H

#include "../camera/Camera.h"
#include "../extra/exception.h"
#include "../extra/esp32/wifi/sta.h"
#include "../extra/esp32/http/server.h"
#include "../face/detection.h"
#include "./mjpeg.h"

using namespace eloq;
using Eloquent::Extra::Exception;
using Eloquent::Extra::Esp32::Http::HttpServer;
using Eloquent::Esp32cam::Face::FaceDetection;


namespace Eloquent {
    namespace Esp32cam {
        namespace Viz {
            /**
             * Show face detection result in browser
             */
            class FaceDetectionServer {
                public:
                    Exception exception;
                    HttpServer server;

                    /**
                     * Constructor
                     */
                    FaceDetectionServer() :
                        exception("FaceDetectionServer"),
                        server("FaceDetectionServer") {

                        }

                    /**
                     * Debug self IP address
                     */
                    String address() const {
                        return String("Face Detection stream is available at http://") + wifi.ip();
                    }

                    /**
                     * Start server
                     */
                    Exception& begin() {
                        if (!viz::mjpeg.begin().isOk())
                            return exception.propagate(viz::mjpeg);

                        onIndex();
                        onEvents();

                        // run in thread
                        server.thread.withStackSize(5000);

                        if (!server.begin().isOk())
                            return exception.propagate(server);

                        return exception.clear();
                    }

                protected:

                    /**
                     * Display main page
                     */
                    void onIndex() {
                        server.onGET("/", [this](WebServer *web) {
                            WiFiClient client = web->client();
                            static const uint8_t index[4367] = {31, 139, 8, 0, 0, 0, 0, 0, 0, 19, 165, 23, 77, 111, 163, 70, 244, 238, 95, 241, 74, 87, 50, 222, 117, 134, 180, 234, 161, 114, 141, 171, 74, 105, 15, 61, 236, 74, 155, 222, 162, 168, 193, 240, 128, 73, 240, 12, 98, 6, 127, 200, 235, 255, 222, 121, 51, 16, 211, 196, 96, 170, 190, 3, 99, 134, 247, 253, 237, 101, 174, 55, 197, 106, 2, 6, 150, 57, 70, 137, 251, 105, 95, 53, 215, 5, 174, 254, 136, 98, 132, 59, 212, 24, 107, 46, 5, 220, 99, 181, 197, 106, 25, 184, 143, 103, 100, 21, 87, 188, 212, 160, 170, 56, 244, 114, 173, 75, 181, 8, 130, 56, 17, 76, 71, 188, 216, 113, 145, 196, 74, 177, 88, 110, 188, 213, 50, 112, 168, 141, 204, 224, 44, 116, 185, 150, 201, 1, 246, 55, 73, 164, 163, 208, 251, 173, 44, 253, 153, 7, 113, 17, 41, 21, 122, 105, 129, 123, 224, 26, 55, 234, 38, 70, 161, 177, 130, 231, 90, 105, 158, 30, 154, 87, 175, 163, 74, 194, 183, 45, 89, 133, 69, 164, 249, 22, 59, 159, 45, 10, 223, 100, 176, 176, 186, 110, 158, 75, 204, 60, 8, 222, 32, 24, 73, 165, 33, 69, 163, 78, 42, 171, 208, 91, 175, 165, 145, 47, 128, 78, 84, 30, 44, 94, 240, 224, 110, 217, 254, 13, 115, 75, 95, 182, 26, 172, 101, 149, 24, 109, 221, 113, 243, 99, 251, 35, 218, 172, 205, 243, 167, 219, 91, 136, 214, 74, 22, 181, 145, 196, 69, 193, 5, 222, 172, 11, 25, 191, 24, 1, 74, 31, 10, 12, 189, 99, 129, 169, 94, 192, 211, 135, 163, 19, 118, 42, 247, 79, 115, 208, 178, 60, 223, 29, 220, 221, 142, 39, 58, 63, 223, 238, 220, 109, 142, 60, 203, 59, 12, 114, 186, 62, 81, 24, 202, 55, 38, 7, 173, 205, 29, 87, 6, 198, 151, 171, 201, 229, 40, 7, 65, 45, 202, 151, 140, 162, 26, 68, 69, 105, 116, 127, 54, 142, 73, 48, 197, 234, 77, 144, 59, 164, 255, 150, 73, 137, 33, 119, 236, 207, 251, 47, 159, 239, 117, 133, 209, 6, 66, 72, 107, 97, 51, 205, 71, 145, 148, 146, 11, 61, 7, 41, 238, 76, 74, 204, 224, 248, 206, 207, 58, 231, 138, 169, 119, 164, 151, 80, 9, 10, 212, 176, 174, 83, 163, 161, 193, 158, 78, 39, 23, 145, 82, 212, 113, 254, 42, 125, 118, 17, 135, 128, 233, 28, 133, 95, 161, 130, 112, 213, 35, 175, 133, 88, 10, 19, 100, 100, 133, 204, 252, 169, 229, 143, 201, 180, 159, 115, 75, 162, 193, 24, 150, 88, 101, 141, 24, 70, 229, 193, 50, 212, 95, 237, 165, 63, 134, 62, 193, 88, 58, 6, 2, 119, 240, 23, 238, 245, 157, 187, 25, 69, 93, 97, 67, 248, 21, 179, 223, 247, 165, 63, 101, 31, 191, 247, 217, 167, 95, 103, 230, 249, 113, 54, 157, 195, 84, 25, 43, 6, 25, 57, 3, 24, 29, 254, 204, 121, 172, 141, 18, 148, 245, 166, 244, 143, 137, 20, 56, 135, 109, 84, 212, 120, 234, 139, 91, 23, 120, 10, 62, 209, 12, 27, 112, 150, 175, 235, 74, 12, 235, 72, 208, 100, 197, 167, 176, 117, 25, 115, 167, 111, 21, 51, 154, 75, 147, 160, 92, 100, 254, 21, 123, 9, 130, 192, 58, 141, 218, 24, 80, 73, 67, 42, 107, 145, 140, 50, 172, 66, 166, 81, 105, 223, 169, 51, 27, 227, 15, 2, 202, 235, 135, 191, 231, 86, 218, 156, 114, 69, 63, 218, 156, 97, 184, 199, 184, 101, 118, 93, 113, 2, 93, 29, 70, 10, 37, 104, 178, 140, 44, 13, 129, 202, 152, 149, 81, 165, 208, 39, 69, 198, 5, 136, 192, 213, 183, 79, 108, 198, 17, 157, 32, 142, 76, 17, 129, 143, 198, 67, 167, 113, 134, 189, 214, 61, 185, 231, 42, 197, 8, 166, 38, 204, 21, 198, 181, 49, 247, 42, 170, 203, 194, 75, 197, 64, 53, 48, 251, 101, 144, 193, 169, 223, 39, 61, 159, 78, 147, 203, 111, 255, 173, 43, 155, 1, 124, 173, 167, 54, 118, 93, 206, 23, 59, 89, 205, 224, 161, 109, 192, 44, 3, 31, 142, 13, 95, 51, 223, 34, 226, 200, 114, 169, 244, 105, 241, 243, 15, 193, 211, 252, 114, 35, 54, 155, 135, 90, 192, 195, 227, 252, 114, 48, 50, 234, 230, 118, 30, 247, 54, 124, 2, 170, 171, 239, 236, 160, 176, 12, 225, 219, 55, 232, 188, 186, 231, 112, 218, 53, 102, 62, 60, 246, 39, 69, 131, 66, 124, 7, 89, 57, 113, 255, 31, 133, 23, 102, 233, 241, 9, 147, 166, 15, 157, 108, 7, 43, 184, 29, 54, 132, 109, 162, 242, 149, 232, 203, 250, 217, 236, 116, 204, 108, 41, 60, 19, 246, 118, 62, 162, 242, 237, 90, 178, 24, 221, 151, 154, 221, 197, 42, 232, 118, 151, 113, 93, 168, 217, 111, 44, 221, 97, 60, 221, 121, 7, 114, 46, 25, 79, 217, 217, 147, 44, 169, 221, 147, 70, 180, 137, 193, 175, 179, 158, 250, 236, 73, 104, 46, 184, 30, 76, 101, 215, 110, 95, 247, 29, 154, 50, 231, 221, 201, 159, 6, 184, 53, 203, 176, 50, 131, 217, 245, 82, 138, 114, 39, 241, 67, 112, 29, 182, 151, 189, 99, 220, 236, 83, 61, 27, 194, 123, 139, 199, 117, 155, 101, 64, 235, 203, 106, 98, 22, 126, 250, 195, 241, 15, 112, 56, 239, 14, 119, 12, 0, 0};

                            client.println(F("HTTP/1.1 200 OK"));
                            client.println(F("Content-Type: text/html"));
                            client.print(F("Content-Length: "));
                            client.println(sizeof(index));
                            client.println(F("Content-Encoding: gzip\r\n"));
                            client.write(index, sizeof(index));
                        });
                    }

                    /**
                     * Display main page
                     */
                    void onEvents() {
                        server.onGET("/events", [this](WebServer *web) {
                            WiFiClient client = web->client();

                            while (true) {
                                delay(1);
                                yield();

                                if (!face::detection.detect().isOk()) {
                                    continue;
                                }

                                if (!face::detection.found()) {
                                    client.println("#[]#");
                                    continue;
                                }

                                auto face = face::detection.first;
                                
                                client.print("#{\"faces\":[");
                                client.print("{\"x\":");
                                client.print(face.x);
                                client.print(",\"y\":");
                                client.print(face.y);
                                client.print(",\"w\":");
                                client.print(face.width);
                                client.print(",\"h\":");
                                client.print(face.height);
                                client.print("}");
                                /*face::detection.forEach([&client](int i, face_t face) {
                                    client.print("{\"x\":");
                                    client.print(face.x);
                                    client.print(",\"y\":");
                                    client.print(face.y);
                                    client.print(",\"w\":");
                                    client.print(face.width);
                                    client.print(",\"h\":");
                                    client.print(face.height);
                                    client.print("},");
                                });*/
                                client.println("]}#");
                                client.flush();
                            }
                        });
                    }
            };
        }
    }
}

namespace eloq {
    namespace viz {
        static Eloquent::Esp32cam::Viz::FaceDetectionServer faceServer;
    }
}

#endif